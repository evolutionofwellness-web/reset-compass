// app.js (updated)
//
// - Delegated pointer click handler for SVG wedges (works on mobile).
// - Keyboard activation (Enter/Space) for focused wedges.
// - Show/hide compass & buttons so each mode behaves like a dedicated page.
// - Routing (hash) kept; renderRoute now toggles UI visibility.

document.addEventListener("DOMContentLoaded", () => {
  // splash hide (JS still hides overlay after animation)
  setTimeout(() => {
    const splash = document.getElementById("splash-screen");
    if (splash) splash.style.display = "none";
  }, 1200);

  // Delegated pointer/click handler for the compass (works in Safari mobile)
  const compass = document.getElementById("compass");
  if (compass) {
    // pointerdown/click ensures immediate response on touch devices
    compass.addEventListener("pointerdown", (e) => {
      const path = e.target.closest && e.target.closest('path[data-mode]');
      if (path) {
        const mode = path.getAttribute('data-mode');
        if (mode) navigateMode(mode);
      }
    });

    // also support click fallback
    compass.addEventListener("click", (e) => {
      const path = e.target.closest && e.target.closest('path[data-mode]');
      if (path) {
        const mode = path.getAttribute('data-mode');
        if (mode) navigateMode(mode);
      }
    });
  }

  // Add keyboard accessibility to each wedge
  document.querySelectorAll("#compass path[data-mode]").forEach(path => {
    path.setAttribute("tabindex", "0");
    path.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        const mode = path.getAttribute("data-mode");
        if (mode) navigateMode(mode);
      }
    });
  });

  // wire hash routing and initial render
  window.addEventListener("hashchange", renderRoute);
  renderRoute();

  updateStreak();
});

/* activities per spec */
const activities = {
  growing: ["Write a goal", "Tackle a challenge", "Start a new project"],
  grounded: ["Declutter a space", "Complete a task", "Plan your day"],
  drifting: ["Go for a walk", "Journal your thoughts", "Listen to calming music"],
  surviving: ["Drink water", "Breathe deeply", "Rest for 5 minutes"]
};

function navigateHash(hash){
  location.hash = hash;
}

function navigateMode(mode){
  // push a route for the mode page
  location.hash = `#mode/${mode}`;
}

function renderRoute(){
  const h = location.hash || "#home";

  // If route is a mode page, hide compass/buttons to make it feel like a dedicated page
  const isMode = h.startsWith("#mode/");
  const compassContainer = document.getElementById("compass-container");
  const modeButtons = document.getElementById("mode-buttons");
  if (compassContainer) compassContainer.style.display = isMode ? "none" : "";
  if (modeButtons) modeButtons.style.display = isMode ? "none" : "";

  if (isMode){
    const mode = h.split("/")[1];
    renderModePage(mode);
  } else if (h === "#quick") {
    renderQuickWins();
  } else if (h === "#history") {
    renderHistory();
  } else if (h === "#about") {
    renderAbout();
  } else {
    renderHome();
  }
}

function renderHome(){
  const container = document.getElementById("content");
  if (!container) return;
  container.innerHTML = `
    <p class="card" style="margin-top:10px">Choose a mode from the compass above or the list below to get started.</p>
  `;
}

function renderModePage(mode){
  const container = document.getElementById("content");
  if (!container) return;
  if (!activities[mode]) {
    container.innerHTML = `<p>Unknown mode</p>`;
    return;
  }
  // mode page with inputs + log buttons
  container.innerHTML = `<h2>${capitalize(mode)}</h2>` +
    activities[mode].map((activity, i) =>
      `<div class="activity-row">
         <label>${escapeHtml(activity)}</label>
         <input type="text" id="note-${mode}-${i}" placeholder="Notes (optional)">
         <button onclick="logActivity('${mode}','${escapeJs(activity)}','note-${mode}-${i}')">Log</button>
       </div>`
    ).join("") +
    `<div style="margin-top:12px"><a href="#home" onclick="navigateHash('#home')">ü°ê Back</a></div>`;
}

function logActivity(mode, activity, noteId){
  const date = new Date().toLocaleDateString();
  const note = noteId ? (document.getElementById(noteId)?.value || "") : "";
  const entry = { date, mode, activity, note };
  let history = JSON.parse(localStorage.getItem("resetHistory") || "[]");
  history.unshift(entry); // newest first
  localStorage.setItem("resetHistory", JSON.stringify(history));

  const lastLogged = localStorage.getItem("lastLogged");
  const today = new Date().toLocaleDateString();
  if (lastLogged !== today) {
    let streak = parseInt(localStorage.getItem("streak") || "0", 10) || 0;
    streak += 1;
    localStorage.setItem("streak", String(streak));
    localStorage.setItem("lastLogged", today);
    updateStreak();
  }

  // show confirmation on mode page
  const container = document.getElementById("content");
  if (container) {
    container.innerHTML = `<p>Logged: <strong>${escapeHtml(activity)}</strong> (${escapeHtml(mode)}) ‚Ä¢ ${escapeHtml(date)}</p>
      <p><a href="#mode/${mode}" onclick="navigateMode('${mode}')">Back to ${capitalize(mode)}</a> ‚Ä¢ <a href="#home" onclick="navigateHash('#home')">Home</a></p>`;
  }
}

function updateStreak(){
  const el = document.getElementById("streak-count");
  if (el) el.textContent = localStorage.getItem("streak") || "0";
}

function renderQuickWins(){
  const container = document.getElementById("content");
  if (!container) return;
  const quick = ["Drink water", "Stand up and stretch", "Take 3 deep breaths"];
  container.innerHTML = `<h2>Quick Wins</h2>` + quick.map((q,i) =>
    `<div class="activity-row">
       <label>${escapeHtml(q)}</label>
       <input type="text" id="qw-${i}" placeholder="Notes (optional)">
       <button onclick="logActivity('quick','${escapeJs(q)}','qw-${i}')">Log</button>
     </div>`
  ).join("") + `<div style="margin-top:12px"><a href="#home" onclick="navigateHash('#home')">ü°ê Back</a></div>`;
}

function renderHistory(){
  const container = document.getElementById("content");
  if (!container) return;
  const history = JSON.parse(localStorage.getItem("resetHistory") || "[]");
  container.innerHTML = `<h2>History</h2>` + (history.length ? history.map(entry =>
    `<p><strong>${escapeHtml(entry.date)}:</strong> ${escapeHtml(entry.mode)} ‚Äî ${escapeHtml(entry.activity)}${entry.note ? ' ‚Ä¢ <em>'+escapeHtml(entry.note)+'</em>' : ''}</p>`
  ).join("") : `<p>No history yet.</p>`) + `<div style="margin-top:12px"><a href="#home" onclick="navigateHash('#home')">ü°ê Back</a></div>`;
}

function renderAbout(){
  const container = document.getElementById("content");
  if (!container) return;
  container.innerHTML = `
    <h2>About</h2>
    <p>The Reset Compass was created by Marcus Clark to help you align your energy and actions with your current state. It's a tool for navigating burnout, overwhelm, and progress‚Äîone small step at a time.</p>
    <p>Questions? <a href="mailto:evolutionofwellness@gmail.com">Contact Support</a></p>
    <div style="margin-top:12px"><a href="#home" onclick="navigateHash('#home')">ü°ê Back</a></div>
  `;
}

function capitalize(word){ return word.charAt(0).toUpperCase() + word.slice(1) }
function escapeHtml(s){ return String(s || '').replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c])) }
function escapeJs(s){ return String(s || '').replace(/'/g, "\\'").replace(/"/g, '\\"') }